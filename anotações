
Laravel MIX - Aula 06 do Módulo 04
    É um pacote JavaScript utilizado pelo Laravel para gerenciar as dependências
    relacionadas ao frontend.
    É necessário instalar o Nodejs, pois o Laravel MIX faz uso do npm.
    Vale ressaltar que o MIX foi substituído por outra ferramenta, o Vite. Claro que ainda é 
    possível fazer uso dele.

    Para instalar o Laravel MIX no programa, é necessário usar o comando de instalação do node dentro da pasta do projeto:
    
    npm install

    E depois usar o comando para instalar o Laravel MIX:

    npm install laravel-mix --save-dev

    Para instalar o Bootstrap:

    npm install bootstrap

    Após instalar o bootstrap, é necessário gerenciar seus arquivos para efetivamente o use na aplicação.
    Para tanto, é necessário a criação de um arquivo chamado app.scss, o qual importa a biblioteca do bootstrap:

    @import "~bootstrap/scss/bootstrap";

    Após isso, é necessário configurar o webpack.mix.js. Normalmente é bastante complexa a configuração,
    no entanto, o Laravel MIX ajuda nesta parte, fazendo uso de atalhos para escrever essa configuração:

    mix
    .sass('resources/css/app.scss', 'public/css')
    .js('resources/js/app.js', 'public/js');


    Depois, a linha .js('resources/js/app.js', 'public/js'); é removida, pois já são importadas diversas funcionalidades por padrão pelo bootstrap, como o axios e lodash, que esse arquivo, app.js, também está importando, o tornando redundandte.


    "webpack é uma ferramenta que permite que tenhamos um pipeline, uma linha de execução que queiramos fazer no nosso front-end, então vamos pegar um arquivo e mover para outro lugar, vai transpilar um typescript para JavaScript, vai transpilar um SCSS para CSS, então essa pipeline de operações existe e utilizamos o webpack para configurar."



    ### CURSO #2 ###

    ### Aula 05 Tópico 02. Lapindando aplicação
    Nós podemos impor restrições nos parâmetros que vamos enviar pelas URLs.

    Por exemplo, para o id sempre ser um número, podemos fazer o seguinte:
    
    Route::get('/teste/{id}', …)->whereNumber('id');
    
    Dessa forma o Laravel fará uma validação para garantir que o parâmetro id é um número.
    https://laravel.com/docs/9.x/routing#parameters-regular-expression-constraints



    ### Aula 05 Tópico 04
    Se todos os nossos valores forem padrão ou corretamente configurados, podemos usar também o método foreignIdFor (que existe desde o Laravel 8) que recebe por parâmetro o nome da model ao invés do nome da coluna. Um exemplo, nesse nosso caso, seria:

    $table->foreignIdFor(Serie::class)->constrained();

    Nesse caso nós acabaríamos tendo a coluna como serie_id ao invés de series_id. Podemos ainda passar um segundo parâmetro para esse método, ficando:

    $table->foreignIdFor(Serie::class, ‘series_id’)->constrained();


    ### Aula 03 Tópico 03
    
    Comando que instala um dos debuger's do laravel:
    composer require barryvdh/laravel-debugbar --dev

